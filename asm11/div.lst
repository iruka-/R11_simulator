                                       //
                                       //	RAMは後半 1k WORD の 先頭から 4 WORD存在すると仮定している.
                                       //
0000:                                 work0:     equ  0x400 
0000:                                 work1:     equ  0x401 
0000:                                 work2:     equ  0x402 
0000:                                 work3:     equ  0x403 
                                       //	work3はCALL命令のPC保存用(RET)で使用する.
                                       
0000:                                            org  0 
                                       //----------------------------------------------------------------
                                       //
                                       //		atan(x)=x-(1/3)*x^3+(1/5)*x^5-(1/7)*x^7....
                                       //
                                       //	pi=4*(4*atan(1/5) - atan(1/239))
                                       //	  =16 * (1/5) - (16*(1/5)/3 *(1/5)*(1/5) - 4 * (1/239)
                                       //
                                       //	浮動小数->整数の下駄履きは 係数500を掛けているので、
                                       //	  =1600 - (1600/75) - (2000/239)
                                       //	結果の整数値(下駄履き係数500) を 500 で割ると、3.14になる.
                                       //----------------------------------------------------------------
                                       
0000:                                 main:            
0000:0640                                        mov  a,1600 		// 4*4*100
                                       //	mov b,5			// 係数500を掛けているので、5で割らずそのまま.
                                       //	call div_ab
                                       //	mov [work0],c	// work0=4*4*(1/5)
0001:4400                                        mov  [work0],a 	// work0=4*4*(1/5)
                                       
0002:2400                                        mov  a,[work0] 
0003:084b                                        mov  b,75 		// 3*5*5
0004:1006 1814                                   call div_ab 
0006:4c01                                        mov  [work1],c 	// work1=4*4*(1/5) /3 *(1/5) * (1/5)
                                       
0007:2400                                        mov  a,[work0] 
0008:2c01                                        mov  b,[work1] 
0009:6800                                        sub  a,b 
000a:4400                                        mov  [work0],a 	// work0=16*atan(1/5) (マクローリン展開は２項のみ)
                                       
                                       
000b:07d0                                        mov  a,2000 		// 4*500
000c:08ef                                        mov  b,239 
000d:100f 1814                                   call div_ab 
000f:4c01                                        mov  [work1],c 	// work1=4*atan(1/239) == 4*(1/239)
                                       
0010:2400                                        mov  a,[work0] 
0011:2c01                                        mov  b,[work1] 
0012:6800                                        sub  a,b 
                                       //	答えはAレジスタに残る. 係数500が掛かった固定小数.
                                       
0013:                                 halt:            
0013:1813                                        jmp  halt 
                                       
                                       //	C=A/B
0014:                                 div_ab:          
0014:4c03                                        mov  [work3],c 
0015:17ff                                        mov  c,0x7ff 
0016:                                 div_loop:        
0016:6001                                        add  c,1 
0017:6800                                        sub  a,b 
0018:5016                                        jnc  div_loop 
0019:3c03                                        ret   
                                       
001a:                                            end   
                                       
                                       


SYMBOL LIST:
div_loop         = 22	(0x16)
main             = 0	(0x0)
halt             = 19	(0x13)
work0            = 1024	(0x400)
work1            = 1025	(0x401)
work2            = 1026	(0x402)
work3            = 1027	(0x403)
div_ab           = 20	(0x14)
